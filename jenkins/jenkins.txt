
pipeline {
   agent any

   tools {
      // Install the Maven version configured as "M3" and add it to the path.
      maven "M3"
   }

   stages {
      stage('Build') {
         steps {
            // Get some code from a GitHub repository
            git 'https://github.com/sushant988/ParagraphAnalytics.git'

            // Run Maven on a Unix agent.
            sh "mvn -Dmaven.test.failure.ignore=true clean package"

            // To run Maven on a Windows agent, use
            // bat "mvn -Dmaven.test.failure.ignore=true clean package"
         }

         post {
            // If Maven was able to run the tests, even if some of the test
            // failed, record the test results and archive the jar file.
            success {
               junit '**/target/surefire-reports/TEST-*.xml'
               archiveArtifacts 'target/*.jar'
            }
         }
      }
      stage('Publish') {
     
      steps {
        withDockerRegistry([ credentialsId: "26e97ad6-ae43-4168-81a3-e62f0c74c513", url: "" ]) {
       
          sh 'docker push svaddaram/paragraphanalytics:latest'
          
         
        }
      }
   }
     stage ('Deploy') {
           steps {
               script{
            
           kubernetesDeploy configs: 'deployment/deployment.yaml', dockerCredentials: [[credentialsId: '26e97ad6-ae43-4168-81a3-e62f0c74c513']], kubeConfig: [path: ''], kubeconfigId: 'KubeConfigK8Cluster', secretName: 'regcred', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']  }
               
           }
     }
}
}
